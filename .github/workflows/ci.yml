name: CI

on:
  push:
    branches: [ main, feature/*, fix/* ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust-version: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        # macOS dependencies will be handled by Homebrew if needed
        echo "macOS dependencies ready"

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings -A clippy::too_many_arguments -A clippy::if_same_then_else -A clippy::items_after_test_module -A clippy::map_clone -A clippy::get_first -A dead_code -A unused_variables -A unexpected_cfgs -A clippy::uninlined_format_args

    - name: Build workspace
      run: cargo build --workspace --verbose

    - name: Run unit tests
      run: cargo test --workspace --lib --verbose

    - name: Run integration tests
      run: cargo test --workspace --test '*' --verbose
      env:
        # Skip actual capture tests in CI environments
        CI: true

  security:
    name: Security Audit
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit